class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode temp = head;
        int count = 0;
        while(temp!=null){
           count++;
           temp = temp.next;
        }

        int mid = count/2;
        temp = head;
        while(mid>0){
            temp = temp.next;
            mid--;
        }
        return temp;
    }
}


// Tortoise-Hare approach

int getMiddle(Node head) {
    if (head == null) {
        return -1; // Handle empty list as needed
    }

    Node slowPointer = head;
    Node fastPointer = head;

    while (fastPointer != null && fastPointer.next != null) {
        slowPointer = slowPointer.next;
        fastPointer = fastPointer.next.next;
    }

    return slowPointer.data; // Assuming 'data' is the variable storing the value
}
