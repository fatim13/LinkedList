class Solution {
    public List<String> generateParenthesis(int n) {
        
        List<String> res = new ArrayList<>();
        int close = n;
        int open = n;
        String s = "";

       return solve(open,close,s,res);
      
       
    }
    
    public List<String> solve(int open, int close, String s, List<String> res){
        if(open == 0 && close == 0){
            res.add(s);
            return res;
        }

        if(open!=0){
           solve(open - 1, close, s + '(', res);
        }

        if(close>open){
            solve(open, close-1, s + ')', res);
        }
        return res;
    }

}

//TC: 2^n .. two branches call solve() in if condition
//SC: O(n)..recursive stack